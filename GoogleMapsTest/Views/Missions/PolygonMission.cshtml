
@{
    ViewBag.Title = "PolygonMission";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create new PolygonMission</h2>
<br />
&nbsp;
<div class="form-group">
    @Html.Label("Mission", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.DropDownList("MissionFK", null, htmlAttributes: new { @class = "form-control" })
    </div>
</div>
&nbsp;
<div class="form-group">
    @Html.Label("Altitude:", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextBox("Altitude", null, htmlAttributes: new { @class = "form-control" })
    </div>
</div>
<br />
&nbsp;
<div style='overflow:hidden;height:440px;width:700px;'>
    <div id='gmap_canvas' style='height:440px;width:700px;'></div>
    <div>
        <small><a href="http://embedgooglemaps.com">									embed google maps							</a></small>
    </div>
    <div><small><a href="http://www.proxysitereviews.com/instantproxies">instantproxies</a></small></div>
    <style>
        #gmap_canvas img {
            max-width: none !important;
            background: none !important;
        }
    </style>
</div>
<br />
&nbsp;
<div class="form-group" style='width:700px;'>
    <div class="col-md-4">
        <input type="button" value="Create Mission" onclick="CreateMissionFromPoly();" class="btn btn-default" />
    </div>
    <div class="col-md-4">
        <input type="button" id="reverseBtn" value="Reverse" onclick="ReverseMission();" class="btn btn-default" style="display:none" />
    </div>
    <div class="col-md-4">
        <input type="button" id="mirrorBtn" value="Mirror" onclick="MirrorMission();" class="btn btn-default" style="display:none" />
    </div>
</div>
<script type='text/javascript'>
    var poly;
    var isClosed = false;
    var FlightMarkers = [];
    var map = new google.maps.Map(document.getElementById('gmap_canvas'), { zoom: 13, center: new google.maps.LatLng(44.786568, 20.44892159999995), mapTypeId: google.maps.MapTypeId.SATELLITE });
    $(document).ready(function () {
        poly = new google.maps.Polyline({ map: map, path: [], strokeColor: "#FF0000", strokeOpacity: 1.0, strokeWeight: 2 });
        google.maps.event.addListener(map, 'click', function (clickEvent) {
            if (isClosed)
                return;
            var markerIndex = poly.getPath().length;
            var isFirstMarker = markerIndex === 0;
            var marker = new google.maps.Marker({ map: map, position: clickEvent.latLng, draggable: true });
            if (isFirstMarker) {
                google.maps.event.addListener(marker, 'click', function () {
                    if (isClosed)
                        return;
                    var path = poly.getPath();
                    poly.setMap(null);
                    poly = new google.maps.Polygon({ map: map, path: path, strokeColor: "#FF0000", strokeOpacity: 0.8, strokeWeight: 2, fillColor: "#FF0000", fillOpacity: 0.35 });
                    isClosed = true;
                });
            }
            google.maps.event.addListener(marker, 'drag', function (dragEvent) {
                poly.getPath().setAt(markerIndex, dragEvent.latLng);
            });
            poly.getPath().push(clickEvent.latLng);
        });
    });
    function CreateMissionFromPoly() {
        var lat = [];
        var lng = [];
        for (var i = 0; i < poly.getPath().length ; i++) {
            var xy = poly.getPath().getAt(i);
            lat.push(xy.lat());
            lng.push(xy.lng());
        }
        if (isClosed) {
            $.ajax({
                url: "/Missions/CreateMissionFromPoly",
                data: { Lat: lat, Lng: lng, MissionFK: $("#MissionFK").val(), Alt: $("#Altitude").val() },
                type: "POST",
                async: false,
                success: function (data) {
                    alert(data.Msg);
                    if (data.Msg == 'Success') {
                        FlightMarkers = [];
                        var firstPK = data.FlightPoints[0].FlightPointPK;
                        for (i = 0; i < data.FlightPoints.length; i++) {
                            var lat = data.FlightPoints[i].Latitude;
                            var lng = data.FlightPoints[i].Longitude;
                            marker = new google.maps.Marker({ map: map, position: new google.maps.LatLng(lat, lng) });
                            FlightMarkers.push(marker);
                            newLocation = new google.maps.LatLng(lat, lng);
                            marker.setPosition(newLocation);
                            infowindow = new google.maps.InfoWindow({ content: '<strong>ID:' + (data.FlightPoints[i].FlightPointPK - firstPK + 1) });
                            google.maps.event.addListener(marker, 'click', function () { infowindow.open(map, marker); });
                            infowindow.open(map, marker);
                            $("#reverseBtn").show();
                            $("#mirrorBtn").show();
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Cannot create mission.');
                }
            });
        }
        else {
            alert('Polygon is not closed.')
        }


    };
    function ReverseMission() {
      
        if (isClosed) {
            $.ajax({
                url: "/Missions/ReverseMission",
                data: { MissionFK: $("#MissionFK").val() },
                type: "POST",
                async: false,
                success: function (data) {
                    if (data.Msg == 'Success') {
                        //hide all markers
                        for (var i = 0; i < FlightMarkers.length; i++) {
                            FlightMarkers[i].setMap(null);
                        }
                        FlightMarkers = [];
                        var firstPK = data.FlightPoints[0].FlightPointPK;
                        for (i = 0; i < data.FlightPoints.length; i++) {
                            var lat = data.FlightPoints[i].Latitude;
                            var lng = data.FlightPoints[i].Longitude;
                            marker = new google.maps.Marker({ map: map, position: new google.maps.LatLng(lat, lng) });
                            infowindow = new google.maps.InfoWindow({ content: '<strong>ID:' + (data.FlightPoints[i].FlightPointPK - firstPK + 1) });
                            google.maps.event.addListener(marker, 'click', function () { infowindow.open(map, marker); });
                            infowindow.open(map, marker);
                            FlightMarkers.push(marker);
                            newLocation = new google.maps.LatLng(lat, lng);
                            marker.setPosition(newLocation);
                        }
                    }
                    else
                    {
                        alert(data.Msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Cannot revert mission.');
                }
            });
        }
        else {
            alert('Polygon is not closed.')
        }


    };
    function MirrorMission() {
        if (isClosed) {
            $.ajax({
                url: "/Missions/MirrorMission",
                data: { MissionFK: $("#MissionFK").val() },
                type: "POST",
                async: false,
                success: function (data) {
                    if (data.Msg == 'Success') {
                        //hide all markers
                        for (var i = 0; i < FlightMarkers.length; i++) {
                            FlightMarkers[i].setMap(null);
                        }
                        FlightMarkers = [];
                        var firstPK = data.FlightPoints[0].FlightPointPK;
                        for (i = 0; i < data.FlightPoints.length; i++) {
                            var lat = data.FlightPoints[i].Latitude;
                            var lng = data.FlightPoints[i].Longitude;
                            marker = new google.maps.Marker({ map: map, position: new google.maps.LatLng(lat, lng) });
                            infowindow = new google.maps.InfoWindow({ content: '<strong>ID:' + (data.FlightPoints[i].FlightPointPK - firstPK + 1) });
                            google.maps.event.addListener(marker, 'click', function () { infowindow.open(map, marker); });
                            infowindow.open(map, marker);
                            FlightMarkers.push(marker);
                            newLocation = new google.maps.LatLng(lat, lng);
                            marker.setPosition(newLocation);
                        }
                    }
                    else {
                        alert(data.Msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Cannot mirror mission.');
                }
            });
        }
        else {
            alert('Polygon is not closed.')
        }


    };
</script>
